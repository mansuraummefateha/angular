
Customer------------------

 [Route("api/[controller]")]
    [ApiController]
    public class CustomersController : ControllerBase
    {
       
        IUnitOfWork unitOfWork;
        IGenericRepo<Customer> repo;
        public CustomersController(IUnitOfWork unitOfWork)
        {
            this.unitOfWork= unitOfWork;
            this.repo = this.unitOfWork.GetRepo<Customer>();
        }

        // GET: api/Customers
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Customer>>> GetCustomers()
        {
            var data = await this.repo.GetAllAsync();
            return data.ToList();
        }
        [HttpGet("VM")]
        public async Task<ActionResult<IEnumerable<CustomerViewModel>>> GetCustomerViewModels()
        {
            var data = await this.repo.GetAllAsync(x => x.Include(c => c.Orders));
            return data.Select(c => new CustomerViewModel
            {
                CustomerId = c.CustomerId,
                CustomerName = c.CustomerName,
                Address = c.Address,
                Email = c.Email,
                CanDelete = c.Orders.Count == 0
            }).ToList();
        }

        [HttpGet("WithOrders")]
        public async Task<ActionResult<IEnumerable<Customer>>> GetCustomerWithOrders()
        {
            var data = await this.repo.GetAllAsync(x => x.Include(c => c.Orders));
            return data.ToList();
        }
        // GET: api/Customers/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Customer>> GetCustomer(int id)
        {
            var customer = await this.repo.GetAsync(c => c.CustomerId == id);

            if (customer == null)
            {
                return NotFound();
            }

            return customer;
        }
 
        public async Task<ActionResult<Customer>> GetCustomerWithOrders(int id)
        {
            var customer = await this.repo.GetAsync(c => c.CustomerId == id, x => x.Include(c => c.Orders));

            if (customer == null)
            {
                return NotFound();
            }

            return customer;
        }
        // PUT: api/Customers/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCustomer(int id, Customer customer)
        {
            if (id != customer.CustomerId)
            {
                return BadRequest();
            }

            await this.repo.UpdateAsync(customer);

            try
            {
                await this.unitOfWork.CompleteAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                throw;

            }

            return NoContent();
        }

        // POST: api/Customers
       
        [HttpPost]
        public async Task<ActionResult<Customer>> PostCustomer(Customer customer)
        {
            await this.repo.AddAsync(customer);
            await unitOfWork.CompleteAsync();

            return customer;
        }

        // DELETE: api/Customers/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCustomer(int id)
        {
            var customer = await repo.GetAsync(c => c.CustomerId == id);
            if (customer == null)
            {
                return NotFound();
            }

            await this.repo.DeleteAsync(customer);
            await unitOfWork.CompleteAsync();

            return NoContent();
        }
    }

OrdersContextController-------------------------------------
    [Route("api/[controller]")]
    [ApiController]
    public class OrdersContextController : ControllerBase
    {
        private readonly ProductDbContext _context;

        public OrdersContextController(ProductDbContext context)
        {
            _context = context;
        }

        // GET: api/OrdersContext
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Order>>> GetOrders()
        {
            return await _context.Orders.ToListAsync();
        }

        // GET: api/OrdersContext/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Order>> GetOrder(int id)
        {
            var order = await _context.Orders.FindAsync(id);

            if (order == null)
            {
                return NotFound();
            }

            return order;
        }

        // PUT: api/OrdersContext/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutOrder(int id, Order order)
        {
            if (id != order.OrderId)
            {
                return BadRequest();
            }

            _context.Entry(order).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!OrderExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }
        [HttpPut("VM/{id}")]
        public async Task<IActionResult> PutOrderWithOrderItem(int id, Order order)
        {
            if (id != order.OrderId)
            {
                return BadRequest();
            }
            var existing = await _context.Orders.Include(x=> x.OrderItems).FirstAsync(o=> o.OrderId == id);
            _context.OrderItems.RemoveRange(existing.OrderItems);
            foreach(var item in order.OrderItems)
            {
                _context.OrderItems.Add(new OrderItem {  OrderId =order.OrderId, ProductId=item.ProductId, Quantity=item.Quantity});
            }
            _context.Entry(existing).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
               
                    throw  ex.InnerException;
               
            }

            return NoContent();
        }
        // POST: api/OrdersContext

        [HttpPost]
        public async Task<ActionResult<Order>> PostOrder(Order order)
        {
            _context.Orders.Add(order);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetOrder", new { id = order.OrderId }, order);
        }

        // DELETE: api/OrdersContext/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound();
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool OrderExists(int id)
        {
            return _context.Orders.Any(e => e.OrderId == id);
        }
    }
OrdersController----------------------------------
    [Route("api/[controller]")]
    [ApiController]
    public class OrdersController : ControllerBase
    {
        private readonly IUnitOfWork unitOfWork;
        private readonly IGenericRepo<Order> repo;
        private readonly IGenericRepo<OrderItem> itemRepo;
        public OrdersController(IUnitOfWork unitOfWork)
        {
           this.unitOfWork = unitOfWork;
           this.repo = this.unitOfWork.GetRepo<Order>();
            this.itemRepo = this.unitOfWork.GetRepo<OrderItem>();
        }

        // GET: api/Orders
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Order>>> GetOrders()
        {
            var data= await this.repo.GetAllAsync();
            return data.ToList();
        }
        [HttpGet("VM")]
        public async Task<ActionResult<IEnumerable<OrderViewModel>>> GetOrderVMs()
        {
           
            var data = await this.repo.GetAllAsync(x=> x.Include(o=> o.OrderItems).ThenInclude(oi => oi.Product)
                                                        .Include(o=> o.Customer));
            return data.Select(o=> new OrderViewModel
            {
                OrderId= o.OrderId,
                CustomerId = o.CustomerId,
                OrderDate =o.OrderDate,
                DeliveryDate=o.DeliveryDate,
                Status= o.Status,
                CustomerName= o.Customer.CustomerName,
                OrderValue = o.OrderItems.Sum(oi=> oi.Quantity*oi.Product.Price)
            })
            .ToList();
        }
        // GET: api/Orders/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Order>> GetOrder(int id)
        {
            var order = await this.repo.GetAsync(o=> o.OrderId == id);

            if (order == null)
            {
                return NotFound();
            }

            return order;
        }
        [HttpGet("{id}/OI")]
        public async Task<ActionResult<Order>> GetOrderWithOrderItems(int id)
        {
            var order = await this.repo.GetAsync(o => o.OrderId == id, x=> x.Include(o=> o.OrderItems).ThenInclude(oi=> oi.Product)
                                                                            .Include(o=> o.Customer));

            if (order == null)
            {
                return NotFound();
            }

            return order;
        }
        // PUT: api/Orders/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutOrder(int id, Order order)
        {
            if (id != order.OrderId)
            {
                return BadRequest();
            }

            await this.repo.UpdateAsync(order);

            try
            {
                await this.unitOfWork.CompleteAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                
                    throw;
                
            }

            return NoContent();
        }
        [HttpPut("VM/{id}")]
        public async Task<IActionResult> PutOrderWithOrderItem(int id, Order order)
        {
            if (id != order.OrderId)
            {
                return BadRequest();
            }
            //var exisiting =await this.repo.GetAsync(o => o.OrderID == id, x=> x.Include(y=> y.OrderItems));
            //var items = exisiting.OrderItems.ToList();
            //for(var i=0; i<= items.Count; i++)
            //{
            //    await this.DeleteOrderItem(exisiting.OrderID, items[i].ProductID);
            //}
            //foreach(var x in order.OrderItems)
            //{
            //    exisiting.OrderItems.Add(x);
            //}
            await this.repo.UpdateAsync(order);

            try
            {
                await this.unitOfWork.CompleteAsync();
            }
            catch (DbUpdateConcurrencyException)
            {

                throw;

            }

            return NoContent();
        }
        // POST: api/Orders
        [HttpPost]
        public async Task<ActionResult<Order>> PostOrder(Order order)
        {
            await this.repo.AddAsync(order);
            await this.unitOfWork.CompleteAsync();

            return order;
        }

        // DELETE: api/Orders/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await this.repo.GetAsync(o=> o.OrderId == id);
            if (order == null)
            {
                return NotFound();
            }

            await this.repo.DeleteAsync(order);
            await this.unitOfWork.CompleteAsync();

            return NoContent();
        }  

    }
ProductController----------------------
[Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        
        private IWebHostEnvironment env;
        IUnitOfWork unitOfWork;
        IGenericRepo<Product> repo;
        public ProductsController(IUnitOfWork unitOfWork, IWebHostEnvironment env)
        {
            this.unitOfWork = unitOfWork;
            this.repo = this.unitOfWork.GetRepo<Product>();
            this.env = env;
        }

        // GET: api/Products
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Product>>> GetProducts()
        {
            var data =  await this.repo.GetAllAsync();
            return data.ToList();
        }
        [HttpGet("VM")]
        public async Task<ActionResult<IEnumerable<ProductViewModel>>> GetProductViewModels()
        {
            var data = await this.repo.GetAllAsync(p => p.Include(x => x.OrderItems));
            return data.ToList().Select(p => new ProductViewModel
            {
                ProductId= p.ProductId,
                Price= p.Price,
                ProductName= p.ProductName,
                IsAvailable= p.IsAvailable,
                CanDelete = !p.OrderItems.Any(),
                Picture = p.Picture

            }).ToList();
        }
        // GET: api/Products/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Product>> GetProduct(int id)
        {
            var product = await this.repo.GetAsync(x=> x.ProductId == id);

            if (product == null)
            {
                return NotFound();
            }

            return product;
        }
        
        // PUT: api/Products/5
     
        [HttpPut("{id}")]
        public async Task<IActionResult> PutProduct(int id, Product product)
        {
            if (id != product.ProductId)
            {
                return BadRequest();
            }

            await this.repo.UpdateAsync(product);

            try
            {
                await this.unitOfWork.CompleteAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
               
                    throw;
                
            }

            return NoContent();
        }
        [HttpPut("{id}/VM")]
        public async Task<IActionResult> PutProductViewModel(int id, ProductInputModel product)
        {
            if (id != product.ProductId)
            {
                return BadRequest();
            }

            var existing = await this.repo.GetAsync(p=> p.ProductId == id);
            if (existing != null)
            {
                existing.ProductName= product.ProductName;
                existing.Price= product.Price;
                existing.IsAvailable= product.IsAvailable;
                await this.repo.UpdateAsync(existing);
            }

            try
            {
                await this.unitOfWork.CompleteAsync();
            }
            catch (DbUpdateConcurrencyException)
            {

                throw;

            }

            return NoContent();
        }
        // POST: api/Products
      
        [HttpPost]
        public async Task<ActionResult<Product>> PostProduct(Product product)
        {
           await this.repo.AddAsync(product);
           await this.unitOfWork.CompleteAsync();

           return product;
        }
       
        [HttpPost("VM")]
        public async Task<ActionResult<Product>> PostProductInput(ProductInputModel product)
        {
            var newProduct = new Product
            {
                ProductName = product.ProductName,
                Price = product.Price,
                IsAvailable = product.IsAvailable,
                Picture = "no-product-image-400x400.png"
            };
            await this.repo.AddAsync(newProduct);
            await this.unitOfWork.CompleteAsync();

            return newProduct;
        }
        [HttpPost("Upload/{id}")]
        public async Task<ImagePathResponse> UploadPicture(int id, IFormFile picture)
        {
            var product = await this.repo.GetAsync(p=> p.ProductId == id);  
            var ext = Path.GetExtension(picture.FileName);
            string fileName = Guid.NewGuid() + ext;
            string savePath = Path.Combine(this.env.WebRootPath, "Pictures", fileName);
            FileStream  fs = new FileStream(savePath, FileMode.Create);
            picture.CopyTo(fs);
            fs.Close();
            product.Picture = fileName;
            await this.repo.UpdateAsync(product);
            await this.unitOfWork.CompleteAsync();
            return new ImagePathResponse { PictureName = fileName };
        }
        // DELETE: api/Products/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            var product = await this.repo.GetAsync(p=> p.ProductId == id);
            if (product == null)
            {
                return NotFound();
            }

            await this.repo.DeleteAsync(product);
            await this.unitOfWork.CompleteAsync();

            return NoContent();
        }
      
    }
DbModels-------------------------------
    public enum Status
    {
        Pending=1,
        Delivered,
        Cancelled
    }
    public class Customer
    {
        public int CustomerId { get; set; }
        [Required(ErrorMessage = "Customer name is required!!"),StringLength(50),Display(Name = "Customer Name")]
        public string CustomerName { get; set; } = default!;
        [Required,StringLength(150)]
        public string Address { get; set; } = default!;
        [Required,StringLength(50),EmailAddress]
        public string Email { get; set; } = default!;

        //nev
        public virtual ICollection<Order> Orders { get;set; } = new List<Order>();

    }
    public class Product
    {
        public int ProductId { get; set; }
        [Required(ErrorMessage = "Product name is required!!"), StringLength(50), Display(Name = "Product Name")]
        public string ProductName { get; set; }= default!;
        [Required(ErrorMessage = "Price is required!!"), Column(TypeName ="money"), DisplayFormat(DataFormatString ="{0:0.00}")]
        public decimal Price { get; set; }
        [Required,StringLength(150)]
        public string Picture { get; set; }=default!;
        public bool IsAvailable { get; set; }= default!;
        //nev
        public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }
    public class Order
    {
        public int OrderId { get; set; }
        [Required,Column(TypeName ="date"),Display(Name = "Order Date"),DisplayFormat(DataFormatString ="{0:yyyy-MM-dd}",ApplyFormatInEditMode =true)]
        public DateTime OrderDate { get; set; }
        [Column(TypeName = "date"), Display(Name = "Delivery Date"), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? DeliveryDate { get; set; }
        [Required,EnumDataType(typeof(Status))]
        public Status Status { get; set; }
        //fk
        [ForeignKey("Customer")]
        public int CustomerId { get; set; }
        //nev
        public Customer Customer { get; set; } = default!;

        public virtual ICollection<OrderItem> OrderItems { get; set;}=new List<OrderItem>();

    }
    public class OrderItem
    {
        [ForeignKey("Order")]
        public int OrderId { get; set; }
        [ForeignKey("Product")]
        public int ProductId { get; set; }
        [Required]
        public int Quantity { get; set; }

        //nev
        public virtual Order Order { get; set; } = default!;
        public virtual Product Product { get; set; }=default!;

    }
    public class ProductDbContext : DbContext
    {
        public ProductDbContext(DbContextOptions<ProductDbContext> options):base(options) { }
        public DbSet<Customer> Customers { get; set; } = default!;
        public DbSet<Order> Orders { get; set; } = default!;
        public DbSet<OrderItem> OrderItems { get; set; } = default!;
        public DbSet<Product> Products { get; set; } = default!;
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OrderItem>().HasKey(o => new { o.OrderId, o.ProductId });
        }
    }
